{"version":3,"sources":["components/Error.jsx","components/Question.jsx","components/Form.jsx","components/Expenditure.jsx","components/Expenses.jsx","helper.js","components/Budget.jsx","App.js","serviceWorker.js","index.js"],"names":["Error","message","className","Question","setBudget","setRemaining","setShowQuestion","useState","quantity","setQuantity","error","setError","onSubmit","e","preventDefault","type","placeholder","onChange","parseInt","target","value","Form","setExpensiture","setNewExpensiture","name","setName","onClick","isNaN","expenditure","id","shortid","generate","Expenditure","Expenses","expenses","map","key","propType","PropTypes","array","isRequired","CheckBudget","budget","remaining","Budget","App","showQuestion","setExpenses","expensiture","newExpensiture","useEffect","console","log","residualBudget","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.aa490aad.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nconst Error = ({message}) => ( <p className=\"alert alert-danger error\"> {message}</p>)\r\n \r\nError.propTypes = {\r\n    message : PropTypes.string.isRequired\r\n}\r\nexport default Error;","import React,{Fragment, useState} from 'react';\r\nimport Error from './Error';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Question = ({setBudget,setRemaining,setShowQuestion}) => {\r\n\r\n    const [quantity,setQuantity]= useState(0);\r\n    const [error,setError] = useState(false);\r\n    \r\n    const handleInput = e => {\r\n        setQuantity(parseInt(e.target.value,10));\r\n    }\r\n    const onSubmitQuantity = e => {        \r\n        e.preventDefault();\r\n\r\n        //Validar\r\n        if(quantity<=0 ){\r\n            setError(true);\r\n            return;\r\n        }\r\n        //Si se pasa la validación\r\n        setShowQuestion(false);\r\n        setError(false);\r\n        setRemaining(quantity);\r\n        setBudget(quantity)\r\n        \r\n        \r\n    }\r\n    return ( \r\n        <Fragment>\r\n            <h2>Coloca tu presupuesto</h2>\r\n            {error && <Error message=\"Presupuesto no válido.\"/>}\r\n            <form \r\n            onSubmit={onSubmitQuantity}\r\n            >\r\n                <input \r\n                    type=\"number\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Coloca tu presupuesto\"\r\n                    onChange={handleInput}\r\n                    value={quantity}\r\n                />\r\n                <button                  \r\n                type=\"submit\" className=\"button-primary u-full-width\" value=\"Definir tu presupuesto\">\r\n                    Definir tu presupuesto\r\n                    </button>\r\n            </form>\r\n        </Fragment>\r\n     );\r\n}\r\nQuestion.propTypes = {\r\n    setBudget: PropTypes.func.isRequired,\r\n    setRemaining: PropTypes.func.isRequired,\r\n    setShowQuestion: PropTypes.func.isRequired\r\n }\r\nexport default Question;","import React,{useState} from 'react';\r\nimport Error from './Error';\r\nimport shortid  from 'shortid';\r\nimport PropTypes from 'prop-types';\r\nconst Form = ({setExpensiture,setNewExpensiture}) => {\r\n    //Save Gastos\r\n        const [name,setName]=useState('');\r\n        const [quantity,setQuantity]=useState(0);\r\n        const [error,setError]= useState(false);\r\n    //Save Gastos\r\n    \r\n    const handleSubmit=e =>{\r\n        e.preventDefault();\r\n        //Validar\r\n        if(quantity<1 || isNaN(quantity)){\r\n            setError(true);\r\n            return;\r\n        }\r\n        if(name === ''){\r\n            setError(true);\r\n            return;\r\n        }\r\n        setError(false);\r\n        //Construir gasto\r\n        const expenditure = {\r\n            name,\r\n            quantity,\r\n            id:shortid.generate()\r\n        }\r\n        \r\n        setExpensiture(expenditure);\r\n        setNewExpensiture(true);\r\n        setName('');\r\n        setQuantity(0);\r\n    }\r\n    return ( \r\n        <form>\r\n            <h2>Agrega tus gastos aquí</h2>\r\n            {error && <Error  message=\"Debe diligenciar campos válidos.\"/>}\r\n            <div className=\"campo\">\r\n                <label >Nombre gasto</label>\r\n                <input \r\n                    type=\"text\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Ejemplo: Transporte\"\r\n                    value ={name}\r\n                    onChange={e=>setName(e.target.value)}\r\n                    \r\n                />\r\n            </div>\r\n            <div className=\"campo\">\r\n                <label>Cantidad gasto</label>\r\n                <input \r\n                    type=\"number\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Ejemplo: 300\"\r\n                    value={quantity}\r\n                    onChange={e=>setQuantity(parseInt(e.target.value))}\r\n                />\r\n            </div>\r\n            <input                  \r\n                type=\"submit\" className=\"button-primary u-full-width\" value=\"Agregar Gasto\"\r\n                onClick={handleSubmit}\r\n                    />\r\n        </form>\r\n     );\r\n}\r\n Form.propTypes = {\r\n    setExpensiture: PropTypes.func.isRequired,\r\n    setNewExpensiture: PropTypes.func.isRequired\r\n }\r\nexport default Form;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n//Gasto\r\nconst Expenditure = ({expenditure}) => {\r\n    return (  \r\n        <li className=\"gastos\">\r\n           <p>{expenditure.name}\r\n                <span className=\"gasto\" >\r\n                    ${expenditure.quantity}\r\n                </span>\r\n           </p>\r\n        </li>\r\n    );\r\n}\r\n \r\nExpenditure.propTypes= {\r\n    expenditure : PropTypes.object.isRequired\r\n    \r\n}\r\nexport default Expenditure;","import React from 'react';\r\nimport Expenditure from './Expenditure';\r\nimport PropTypes from 'prop-types';\r\nconst Expenses = ({expenses}) => (\r\n    <div className=\"gastos-realizados\">\r\n        <h2>Listados</h2>\r\n        {\r\n            expenses.map((expenditure)=>{\r\n                return (\r\n                    <Expenditure\r\n                        key={expenditure.id}\r\n                        expenditure={expenditure}\r\n                    />\r\n\r\n                    \r\n                )\r\n            })\r\n        }\r\n\r\n    </div>\r\n)\r\n Expenses.propType= {\r\n     expenses: PropTypes.array.isRequired\r\n }\r\nexport default Expenses;","export const CheckBudget = (budget,remaining) =>{\r\n    let className;\r\n    if((budget/4) > remaining){\r\n        className =\"alert alert-danger\";\r\n    }else if( (budget/2) >remaining){\r\n        className=\"alert alert-warning\"\r\n    }else{\r\n        className=\"alert alert-success\";\r\n    }\r\n    return className;\r\n}","import React,{Fragment} from 'react';\r\nimport {CheckBudget} from '../helper';\r\nimport PropTypes from 'prop-types';\r\nconst Budget = ({remaining,budget}) => {\r\n    return (  \r\n        <Fragment>\r\n            <div className=\"alert alert-primary\">\r\n                Presupuesto: $ {budget}\r\n            </div>\r\n            <div className={CheckBudget(budget,remaining)}>\r\n                Restante: $ {remaining}\r\n\r\n            </div>\r\n        </Fragment>\r\n\r\n    );\r\n}\r\nBudget.propTypes = {\r\n    remaining : PropTypes.number.isRequired,\r\n    budget : PropTypes.number.isRequired\r\n}\r\nexport default Budget;","import React,{useState,useEffect} from 'react';\nimport Question from './components/Question';\nimport Form from './components/Form';\nimport Expenses from './components/Expenses';\nimport Budget from './components/Budget';\n\nfunction App() {\n  //Definir state\n  const [budget,setBudget] = useState(0);\n  const [remaining,setRemaining] = useState(0);\n  //Pasar mostrar gastos.\n  const [showQuestion,setShowQuestion]= useState(true);\n  //Gastos\n  const[expenses,setExpenses] = useState([]);\n\n    const[expensiture,setExpensiture]= useState({});\n    const [newExpensiture,setNewExpensiture] = useState(false);\n  //Guardar Gastos\n\n  useEffect(()=>{\n    if(newExpensiture){\n      //Agrega el nuevo presupuesto.\n      setExpenses([\n        ...expenses,\n        expensiture\n      ])\n    }\n    //Resta del presupuesto actual\n    console.log(remaining);\n    console.log('Entró')\n    const residualBudget = remaining - parseInt(expensiture.quantity);\n    setRemaining(residualBudget);\n    setNewExpensiture(false);\n    \n  },[expensiture])\n\n\n  return (\n    <div className=\"container\">\n     <header>\n       <h1>Gasto Semanal</h1>\n       <div className=\"contenido-principal contenido\">\n         {\n           showQuestion ?\n              (<Question \n              setBudget= {setBudget}\n              setRemaining = {setRemaining}\n              setShowQuestion={setShowQuestion}\n              />)\n              : \n              (\n\n                <div className=\"row\">\n                <div className=\"one-half column\">\n                  <Form                    \n                    setExpensiture = {setExpensiture}\n                    setNewExpensiture={setNewExpensiture}\n                  />\n                </div>\n                <div className=\"one-half column\">\n                  <Expenses\n                    expenses = {expenses}\n                  />\n                  <Budget\n                    budget={budget}\n                    remaining={remaining}\n                    />\n\n                </div>\n      \n              </div>\n              )  \n         }\n       </div>\n       \n     </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}